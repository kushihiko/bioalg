package population

import (
	"fmt"
	"math"
	"math/rand"
)

const (
	TournamentSize = 5
)

type GAConfig struct {
	GeneMin float64
	GeneMax float64
}

type Chromosome struct {
	Genes []bool
}

func NewChromosome(chromosomeSize int) Chromosome {
	genes := make([]bool, chromosomeSize)
	for i := range genes {
		genes[i] = rand.Intn(2) == 1
	}
	return Chromosome{Genes: genes}
}

type Population struct {
	Chromosomes    []Chromosome
	PopulationSize int
	ChromosomeSize int
	MutationRate   float64
	CrossoverRate  float64
	Fitness        func(Chromosome) int
}

func NewPopulation(populationSize, chromosomeSize int, mutationRate, crossoverRate float64, fitness func(Chromosome) int) *Population {
	pop := &Population{
		Chromosomes:    make([]Chromosome, populationSize),
		MutationRate:   mutationRate,
		CrossoverRate:  crossoverRate,
		PopulationSize: populationSize,
		ChromosomeSize: chromosomeSize,
		Fitness:        fitness,
	}

	for i := range pop.Chromosomes {
		pop.Chromosomes[i] = NewChromosome(chromosomeSize)
	}
	return pop
}

func (p *Population) Print() {
	for i := range p.Chromosomes {
		for j := range p.Chromosomes[i].Genes {
			if p.Chromosomes[i].Genes[j] {
				fmt.Printf("1")
			} else {
				fmt.Printf("0")
			}
		}
		fmt.Println()
	}
}

func (p *Population) AverageFitness() float64 {
	var sum int

	for _, chrom := range p.Chromosomes {
		sum += p.Fitness(chrom)
	}

	return float64(sum) / float64(len(p.Chromosomes))
}

func (p *Population) GetBest() Chromosome {
	minFitness := math.MaxInt
	x := p.Chromosomes[0]

	for _, chrom := range p.Chromosomes {
		current := p.Fitness(chrom)
		if current < minFitness {
			minFitness = current
			x = chrom
		}
	}

	return x
}

func (p *Population) EvolvePopulation() {
	newChromosomes := make([]Chromosome, p.PopulationSize)

	for i := 0; i < p.PopulationSize/2; i++ {
		parent1 := p.tournamentSelection(TournamentSize)
		parent2 := p.tournamentSelection(TournamentSize)

		child1, child2 := crossover(parent1, parent2, CROSSOVER_RATE)

		child1 = mutate(child1, MUTATION_RATE)
		child2 = mutate(child2, MUTATION_RATE)

		newPopulation = append(newPopulation, child1, child2)
	}

	return newPopulation
}

func (p *Population) crossover(parent1, parent2 int) {
	
}

func (p *Population) ReproductionTournament() {
	newChromosomes := make([]Chromosome, p.PopulationSize)
	for i := 0; i < p.PopulationSize; i++ {
		newChromosomes[i] = p.Chromosomes[p.tournamentSelection(3)]
	}

	p.Chromosomes = newChromosomes
}

func (p *Population) tournamentSelection(k int) int {
	nums := rand.Perm(p.PopulationSize)
	nums = nums[:k]

	best := nums[0]
	for i := 1; i < k; i++ {
		competitor := nums[i]
		if p.Fitness(p.Chromosomes[competitor]) < p.Fitness(p.Chromosomes[best]) {
			best = competitor
		}
	}

	return best
}

func (p *Population) Reproduction() {
	fitnessValues := make([]float64, p.PopulationSize)
	totalFitness := 0.0

	for i, chrom := range p.Chromosomes {
		f := p.Fitness(chrom)
		if f == 0 {
			fitnessValues[i] = math.MaxInt
		} else {
			fitnessValues[i] = 1.0 / float64(f)
		}

		totalFitness += fitnessValues[i]
	}

	probabilities := make([]float64, p.PopulationSize)
	for i := range len(probabilities) {
		probabilities[i] = fitnessValues[i] / totalFitness
	}

	newChromosomes := make([]Chromosome, p.PopulationSize)
	for i := 0; i < p.PopulationSize; i++ {
		newChromosomes[i] = p.Chromosomes[p.rouletteWheelSelection(probabilities)]
	}

	p.Chromosomes = newChromosomes
}

func (p *Population) rouletteWheelSelection(probabilities []float64) int {
	r := rand.Float64()
	sum := 0.0

	for i, prob := range probabilities {
		sum += prob
		if r <= sum {
			return i
		}
	}

	return len(p.Chromosomes) - 1
}

func (p *Population) Crossover() {
	indicates := rand.Perm(len(p.Chromosomes))

	for i := range len(p.Chromosomes) / 2 {
		if rand.Float64() > p.CrossoverRate {
			continue
		}

		point := rand.Intn(p.ChromosomeSize)
		cr1 := p.Chromosomes[indicates[2*i]].Genes
		cr2 := p.Chromosomes[indicates[2*i+1]].Genes

		tmp := make([]bool, len(cr1))
		copy(tmp, cr1)
		copy(cr1[point:], cr2[point:])
		copy(cr2[point:], tmp[point:])
	}
}

func (p *Population) Mutate() {
	for i := range len(p.Chromosomes) {
		if rand.Float64() > p.MutationRate {
			continue
		}

		index := rand.Intn(p.ChromosomeSize)
		p.Chromosomes[i].Genes[index] = !p.Chromosomes[i].Genes[index]
	}
}
